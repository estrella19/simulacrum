; Sample supervisor config file.
;
; For more information on the config file, please see:
; http://supervisord.org/configuration.html
;
; Notes:
;  - Shell expansion ("~" or "$HOME") is not supported.  Environment
;    variables can be expanded using this syntax: "%(ENV_HOME)s".
;  - Quotes around values are not supported, except in the case of
;    the environment= options as shown below.
;  - Comments must have a leading space: "a=b ;comment" not "a=b;comment".
;  - Command will be truncated if it looks like a config file comment, e.g.
;    "command=bash -c 'foo ; bar'" will truncate to "command=bash -c 'foo ".

; Usage:
;'supervisorctl status all' will show you the status of all defined services.
;'supervisorctl start <program name>' will start a stopped (or crashed) service.
;'supervisorctl stop <program name>' will stop a running service.
;'supervisorctl reload' will force Supervisor to reload the supervisord.conf file. 
;                       You'll need to do this if you add a new service.

[unix_http_server]
file=/tmp/supervisor.sock   ; the path to the socket file
chmod=0766                 ; socket file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; default is no username (open server)
;password=123               ; default is no password (open server)

[supervisord]
pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid
nodaemon=false               ; start in foreground if true; default false
directory=/afs/slac/g/ad/simul/simulacrum
;logfile=/tmp/supervisord.log
;loglevel=warn
;logfile_backups=5
;logfile_maxbytes=5000000

; The rpcinterface:supervisor section must remain in the config file for
; RPC (supervisorctl/web interface) to work.  Additional interfaces may be
; added by defining them in separate [rpcinterface:x] sections.

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; The supervisorctl section configures how supervisorctl will connect to
; supervisord.  configure it match the settings in either the unix_http_server
; or inet_http_server section.

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
;username=chris              ; should be same as in [*_http_server] if set
;password=123                ; should be same as in [*_http_server] if set
;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history  ; use readline history if available

[program:model_service]
command=/afs/slac/g/ad/simul/simulacrum/model_service/model_service
directory=/afs/slac/g/ad/simul/simulacrum/model_service
autostart=true                ; start at supervisord start (default: true)
startsecs=2                   ; # of secs prog must stay up to be running (def. 1)
stdout_logfile=/nfs/slac/g/ad/logs/model_service/model_service.log
stderr_logfile=/nfs/slac/g/ad/logs/model_service/model_service.err
priority=1

[program:bpm_service]
command=/afs/slac/g/ad/simul/simulacrum/start_service.bash bpm_service
directory=/afs/slac/g/ad/simul/simulacrum/bpm_service
autostart=false
startsecs=2
stdout_logfile=/nfs/slac/g/ad/logs/bpm_service/bpm_service.log
stderr_logfile=/nfs/slac/g/ad/logs/bpm_service/bpm_service.err
priority=2

[program:magnet_service]
command=/afs/slac/g/ad/simul/simulacrum/start_service.bash magnet_service
directory=/afs/slac/g/ad/simul/simulacrum/magnet_service
autostart=false
startsecs=2
stdout_logfile=/nfs/slac/g/ad/logs/magnet_service/magnet_service.log
stderr_logfile=/nfs/slac/g/ad/logs/magnet_service/magnet_service.err
priority=2

[program:obstruct_service]
command=/afs/slac/g/ad/simul/simulacrum/start_service.bash obstruct_service
directory=/afs/slac/g/ad/simul/simulacrum/obstruct_service
autostart=false
startsecs=2
stdout_logfile=/nfs/slac/g/ad/logs/obstruct_service/obstruct_service.log
stderr_logfile=/nfs/slac/g/ad/logs/obstruct_service/obstruct_service.err
priority=2

[program:klystron_service]
command=/afs/slac/g/ad/simul/simulacrum/start_service.bash klystron_service
directory=/afs/slac/g/ad/simul/simulacrum/klystron_service
autostart=false
startsecs=2
stdout_logfile=/nfs/slac/g/ad/logs/klystron_service/klystron_service.log
stderr_logfile=/nfs/slac/g/ad/logs/klystron_service/klystron_service.err
priority=2

[program:camera_service]
command=/afs/slac/g/ad/simul/simulacrum/start_service.bash camera_service
directory=/afs/slac/g/ad/simul/simulacrum/camera_service
autostart=false
startsecs=2
stdout_logfile=/nfs/slac/g/ad/logs/camera_service/camera_service.log
stderr_logfile=/nfs/slac/g/ad/logs/camera_service/camera_service.err
priority=2

[program:generic_pv_service]
command=/afs/slac/g/ad/simul/simulacrum/start_service.bash generic_pv_service
directory=/afs/slac/g/ad/simul/simulacrum/generic_pv_service
autostart=false
startsecs=2
stdout_logfile=/nfs/slac/g/ad/logs/generic_pv_service/generic_pv_service.log
stderr_logfile=/nfs/slac/g/ad/logs/generic_pv_service/generic_pv_service.err
priority=2

